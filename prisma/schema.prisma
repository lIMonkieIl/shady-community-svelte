generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    url = env("POSTGRES_PRISMA_URL") // uses connection pooling

    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection

    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Mix {
    id       String         @id @unique
    name     String
    isPublic Boolean        @map("is_Public")
    cook     User?          @relation(fields: [cookId], references: [id])
    category Category
    madeWith MixComponent[]
    cookId   Int?           @map("cook_id")

    @@map("mixs")
}

model MixComponent {
    id           Int    @id @default(autoincrement())
    purchase     Int    @default(0)
    ingredientId String @map("ingredient_id")
    amount       Int
    mix          Mix    @relation(fields: [mixId], references: [id])
    mixId        String @map("mix_id")

    @@map("mix_components")
}

enum Category {
    Mix
    Premix
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int     @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique @map("session_token")
    userId       Int      @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            Int       @id @default(autoincrement())
    discordId     String?   @unique @map("discord_id")
    username      String?
    email         String?   @unique
    emailVerified Boolean?  @default(false) @map("email_verified")
    displayName   String?   @map("display_name")
    avatar        String?
    accounts      Account[]
    sessions      Session[]
    mixs          Mix[]

    @@map("users")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
